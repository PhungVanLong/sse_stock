// =================================================================
// 1. IMPORT C√ÅC TH∆Ø VI·ªÜN
// =================================================================
import express from 'express';
import cors from 'cors';
import fetch from 'node-fetch';

// =================================================================
// 2. KH·ªûI T·∫†O ·ª®NG D·ª§NG EXPRESS
// =================================================================
const app = express();
// Render s·∫Ω cung c·∫•p c·ªïng qua bi·∫øn m√¥i tr∆∞·ªùng. D√πng 5001 l√†m d·ª± ph√≤ng cho local.
const PORT = process.env.PORT || 5001;

// C·∫•u h√¨nh CORS ƒë·ªÉ cho ph√©p m·ªçi k·∫øt n·ªëi
app.use(cors());

// =================================================================
// 3. H√ÄM H·ªñ TR·ª¢ L·∫§Y D·ªÆ LI·ªÜU (ƒê√É S·ª¨A)
// =================================================================

/**
 * G·ªçi ƒë·∫øn API Python ƒë√£ ƒë∆∞·ª£c deploy tr√™n Render ƒë·ªÉ l·∫•y gi√° c·ªï phi·∫øu.
 * @param {string[]} symbols - M·∫£ng c√°c m√£ c·ªï phi·∫øu, v√≠ d·ª• ['ACB', 'FPT'].
 * @returns {Promise<object>} - M·ªôt object ch·ª©a d·ªØ li·ªáu gi√°.
 */
async function fetchStockPrices(symbols) {
    // ‚ú® FIX: Tr·ªè th·∫≥ng ƒë·∫øn URL API Python ƒë√£ ho·∫°t ƒë·ªông c·ªßa b·∫°n
    const pythonApiUrl = 'https://vn-stock-api-bsjj.onrender.com';
    const apiUrl = `${pythonApiUrl}/api/stocks/price?symbols=${symbols.join(',')}`;

    console.log(`ƒêang g·ªçi API: ${apiUrl}`);

    try {
        const response = await fetch(apiUrl);
        if (!response.ok) {
            console.error(`L·ªói khi g·ªçi API Python: ${response.status} ${response.statusText}`);
            return { error: `API Python tr·∫£ v·ªÅ l·ªói: ${response.statusText}` };
        }
        const data = await response.json();
        // API c·ªßa b·∫°n tr·∫£ v·ªÅ d·ªØ li·ªáu trong key 'data'
        return data.data || {};
    } catch (error) {
        console.error('Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server Python l·∫•y d·ªØ li·ªáu.', error);
        return { error: 'Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server Python.' };
    }
}

// =================================================================
// 4. ENDPOINT SSE CH√çNH
// =================================================================
app.get('/stream-prices', (req, res) => {
    const { symbols } = req.query;
    if (!symbols) {
        return res.status(400).json({ error: 'Vui l√≤ng cung c·∫•p m√£ c·ªï phi·∫øu qua query "symbols".' });
    }
    const symbolList = symbols.split(',').map(s => s.trim().toUpperCase());

    // Thi·∫øt l·∫≠p headers cho SSE
    res.setHeader('Content-Type', 'text/event-stream');
    res.setHeader('Cache-Control', 'no-cache');
    res.setHeader('Connection', 'keep-alive');
    res.flushHeaders();

    console.log(`Client ƒë√£ k·∫øt n·ªëi ƒë·ªÉ stream m√£: ${symbolList.join(', ')}`);

    // G·ª≠i d·ªØ li·ªáu ƒë·ªãnh k·ª≥
    const intervalId = setInterval(async () => {
        const priceData = await fetchStockPrices(symbolList);

        // Ch·ªâ g·ª≠i d·ªØ li·ªáu n·∫øu k·∫øt n·ªëi c√≤n m·ªü
        if (!res.writableEnded) {
            res.write(`data: ${JSON.stringify(priceData)}\n\n`);
        }
    }, 5000); // C·∫≠p nh·∫≠t m·ªói 5 gi√¢y

    // X·ª≠ l√Ω khi client ng·∫Øt k·∫øt n·ªëi
    req.on('close', () => {
        console.log('Client ƒë√£ ng·∫Øt k·∫øt n·ªëi.');
        clearInterval(intervalId); // D·ª´ng vi·ªác g·ª≠i d·ªØ li·ªáu
        res.end();
    });
});

// =================================================================
// 5. ENDPOINT TRANG CH·ª¶ V√Ä KH·ªûI CH·∫†Y SERVER
// =================================================================
app.get('/', (req, res) => {
    res.json({
        message: "Node.js SSE Server cho gi√° c·ªï phi·∫øu.",
        status: "ƒêang ho·∫°t ƒë·ªông",
        usage: `K·∫øt n·ªëi SSE t·ªõi /stream-prices?symbols=ACB,FPT,VCB`
    });
});

app.listen(PORT, () => {
    console.log(`üöÄ Node.js SSE Server ƒëang ch·∫°y tr√™n c·ªïng ${PORT}`);
});
