import express from "express";
import axios from "axios";

const app = express();
const PORT = process.env.PORT || 3000;

// B·ªô nh·ªõ cache ƒë·ªÉ tr√°nh g·ªçi API g·ªëc qu√° nhi·ªÅu l·∫ßn
let cache = {};
let lastUpdated = 0;
const CACHE_TTL = 5000; // l√†m m·ªõi m·ªói 5 gi√¢y

// H√†m l·∫•y d·ªØ li·ªáu nhi·ªÅu m√£ c√πng l√∫c
async function fetchStockData(symbols) {
    const now = Date.now();

    // N·∫øu cache c√≤n h·∫°n, tr·∫£ l·∫°i d·ªØ li·ªáu c≈©
    if (now - lastUpdated < CACHE_TTL && cache[symbols]) {
        console.log("üîÅ D√πng l·∫°i cache");
        return cache[symbols];
    }

    console.log("üåê Fetch m·ªõi t·ª´ API g·ªëc...");
    const arr = symbols.split(",");
    const result = {};

    // G·ªçi l·∫ßn l∆∞·ª£t t·ª´ng m√£
    for (const symbol of arr) {
        try {
            const url = `https://vn-stock-api-bsjj.onrender.com/api/stock/${symbol}/price`;
            const res = await axios.get(url);
            result[symbol] = res.data;
        } catch (err) {
            result[symbol] = { error: "Fetch failed" };
        }
    }

    cache[symbols] = result;
    lastUpdated = now;
    return result;
}

// üîπ Route ki·ªÉm tra tr·∫°ng th√°i (Render/UptimeRobot health check)
app.get("/", (req, res) => {
    res.send("‚úÖ SSE stock API is running");
});

// üîπ Route health check (d√†nh ri√™ng cho monitor)
app.get("/health", (req, res) => {
    res.status(200).json({ status: "ok", uptime: process.uptime() });
});

// üî∏ Endpoint SSE (stream d·ªØ li·ªáu)
app.get("/api/stock/stream", async (req, res) => {
    res.setHeader("Content-Type", "text/event-stream");
    res.setHeader("Cache-Control", "no-cache");
    res.setHeader("Connection", "keep-alive");

    const symbols = req.query.symbols || "ACB";
    console.log(`üì° Client subscribe symbols: ${symbols}`);

    // G·ª≠i d·ªØ li·ªáu ban ƒë·∫ßu
    const sendUpdate = async () => {
        const data = await fetchStockData(symbols);
        res.write(`data: ${JSON.stringify({ time: new Date(), data })}\n\n`);
    };

    await sendUpdate();
    const interval = setInterval(sendUpdate, 5000); // c·∫≠p nh·∫≠t m·ªói 5s

    req.on("close", () => {
        clearInterval(interval);
        console.log("‚ùå Client disconnected");
    });
});

// üîπ L·∫Øng nghe c·ªïng
app.listen(PORT, () => console.log(`‚úÖ SSE server running on port ${PORT}`));
